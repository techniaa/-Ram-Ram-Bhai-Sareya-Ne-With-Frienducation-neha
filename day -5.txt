Product of Array Except Self
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
         int n = nums.size();


    std::vector<int> result(n, 1);

   
    int left_product_value = 1;
    for (int i = 1; i < n; ++i) {
        left_product_value *= nums[i - 1];
        result[i] *= left_product_value;
    }

   
    int right_product_value = 1;
    for (int i = n - 2; i >= 0; --i) {
        right_product_value *= nums[i + 1];
        result[i] *= right_product_value;
    }

    return result;
}

    
};
merge sorted array
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m - 1;  
        int j = n - 1;  
        int k = m + n - 1;  

    while (i >= 0 && j >= 0) {
        if (nums1[i] > nums2[j]) {
            nums1[k--] = nums1[i--];
        } else {
            nums1[k--] = nums2[j--];
        }
    }

    
    while (j >= 0) {
        nums1[k--] = nums2[j--];
    }
};